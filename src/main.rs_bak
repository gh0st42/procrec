use procfs::process::Process;
use procfs::KernelStats;
use std::convert::TryInto;
use std::{thread, time};

#[derive(Debug)]
struct Sample {
    num_threads: i64,
    utime: u64,
    stime: u64,
    cutime: i64,
    cstime: i64,
    time: u64,
    vsize: u64,
    rss: i64,
}
fn get_total_jiffies() -> f32 {
    let cpu = KernelStats::new().unwrap().total;
    cpu.user
        + cpu.nice
        + cpu.system
        + cpu.idle
        + cpu.iowait.unwrap_or_default()
        + cpu.irq.unwrap_or_default()
        + cpu.steal.unwrap_or_default()
        + cpu.softirq.unwrap_or_default()
}
fn get_sample(pid: i32) -> Sample {
    let target = Process::new(pid).unwrap();
    let stats = target.stat().unwrap();
    Sample {
        num_threads: stats.num_threads,
        utime: stats.utime,
        stime: stats.stime,
        cutime: stats.cutime,
        cstime: stats.cstime,
        time: stats.utime + stats.stime,
        vsize: stats.vsize,
        rss: stats.rss,
    }
}
fn sum_cpu_time(sample: &Sample) -> i64 {
    let times: i64 = (sample.utime + sample.stime).try_into().unwrap();
    times + sample.cutime + sample.cstime
}
fn delay(millis: u64) {
    let timeout = time::Duration::from_millis(millis);
    thread::sleep(timeout);
}
fn main() {
    let cores = procfs::CpuInfo::new().unwrap().num_cores() as f32;
    let sample_rate = 1000;
    //let watch_pid = 35399;
    let watch_pid = 824;
    //let watch_pid = 775;
    //let watch_pid = 30206;

    let mut jiffies1 = get_total_jiffies() / cores;
    let cur_samples = get_sample(watch_pid);
    //let mut s1 = sum_cpu_time(&cur_samples);
    let mut lasttimes = cur_samples.time;

    let start = time::SystemTime::now();
    loop {
        delay(sample_rate);

        let jiffies2 = get_total_jiffies() / cores;
        //dbg!(jiffies2);

        let cur_samples = get_sample(watch_pid);
        //let s2 = sum_cpu_time(&cur_samples);
        //dbg!(s2);

        let d_j = jiffies2 - jiffies1;
        //dbg!(d_j);

        //let d_s = s2 - s1;
        //dbg!(d_s);

        //println!("CPU% {:.02}", (d_s as f32 / d_j));
        jiffies1 = jiffies2;
        //s1 = s2;

        let d_t: f32 = (cur_samples.time - lasttimes) as f32;
        let percent_cpu = d_t / d_j as f32;
        println!(
            "{:.02} CPU% {:.02} RSS {} VSIZE {} \n",
            start.elapsed().unwrap().as_secs_f32(),
            percent_cpu,
            cur_samples.rss,
            cur_samples.vsize
        );
        lasttimes = cur_samples.time;
    }
}
